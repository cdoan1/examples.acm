---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-deploy-cert-manager-addon
spec:
  params:
  - name: clusterClaimName
    default: ""
    type: string
  steps:
  - args:
    - |-
      set -e
      set -x

      TOP=$(pwd)

      oc get secret cert-manager-dns-credentials -oyaml > cert-manager-dns-credentials.yaml
      oc get secret brew-pull-secret -oyaml > brew-pull-secret.yaml

      cat cert-manager-dns-credentials.yaml \
        | sed "s/namespace: open-cluster-management-pipelines-vault/namespace: cert-manager/g" \
        | sed "/  resourceVersion:/d" \
        | sed "/  uid:/d" \
        | sed "/  creationTimestamp:/d" > cert-manager-dns-credentials.yaml.secret

      cat brew-pull-secret.yaml | sed 's/brew-pull-secret/pull-secret/g' \
        | sed 's/open-cluster-management-pipelines-vault/openshift-config/g' \
        | sed "/  resourceVersion:/d" \
        | sed "/  uid:/d" \
        | sed "/  creationTimestamp:/d" > brew-pull-secret.yaml.secret

      oc --kubeconfig=$TOP/remote.kubeconfig cluster-info

      oc --kubeconfig=$TOP/remote.kubeconfig apply -f brew-pull-secret.yaml.secret

      oc --kubeconfig=$TOP/remote.kubeconfig apply -k gitops/kustomization/redhat-cert-manager/1.10.2-21

      echo "waiting 60s"
      sleep 60

      oc --kubeconfig=$TOP/remote.kubeconfig wait --for=condition=available deployment/cert-manager -n cert-manager --timeout=300s

      oc --kubeconfig=$TOP/remote.kubeconfig apply -f cert-manager-dns-credentials.yaml.secret
            
      echo "Generate the Certificate ..."
      
      BASE_DOMAIN=$(oc --kubeconfig=$TOP/remote.kubeconfig get dns cluster -o json | jq -r ".spec.baseDomain")

      echo "BASE_DOMAIN: $BASE_DOMAIN"

      oc --kubeconfig=$TOP/remote.kubeconfig patch certmanager cluster --type merge \
        -p '{"spec":{"unsupportedConfigOverrides":{"controller":{"args":["--dns01-recursive-nameservers=1.1.1.1:53,8.8.8.8:53","--dns01-recursive-nameservers-only","--cluster-resource-namespace=cert-manager"]}}}}'

      sleep 30

      oc --kubeconfig=$TOP/remote.kubeconfig apply -f - <<EOF
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: public-issuer
        namespace: cert-manager
      spec:
        acme:
          email: cdoan@redhat.com
          preferredChain: ""
          privateKeySecretRef:
            name: letsencrypt-staging
          server: https://acme-v02.api.letsencrypt.org/directory
          solvers:
          - dns01:
              route53:
                region: us-east-1
                accessKeyIDSecretRef:
                  key: aws_access_key_id
                  name: cert-manager-dns-credentials
                secretAccessKeySecretRef:
                  key: aws_secret_access_key
                  name: cert-manager-dns-credentials
      EOF

      # 7. wait for the tls certs to be generated
      # echo "Waiting 10m for ingress pods to be ready ..."
      # oc --kubeconfig=$TOP/remote.kubeconfig wait --for="condition=Available=True" deployment router-default -n openshift-ingress --timeout=600s
      # oc --kubeconfig=$TOP/remote.kubeconfig get pods -n openshift-ingress

      # oc --kubeconfig=$TOP/remote.kubeconfig get certificates -A
      # oc --kubeconfig=$TOP/remote.kubeconfig get certificaterequests -A

      exit 0
    command:
    - /bin/bash
    - -c
    image: quay.io/cdoan_rh22/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source
