---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: task-mce-hypershift-create-ocm-cluster
spec:
  params:
  - name: cluster-name
    default: "cdoanocm"
    description: name of cluster to install MGH
    type: string
  - name: multi-az
    default: "true"
    description: "true | false - Deploy to multiple data centers."
    type: string
  - name: ocp-version
    default: "4.10.38"
    description: "ocp version - example: 4.10.38"
    type: string
  - name: GITOPS_SECRET_NAME
    default: 'ocm-staging'
    description: Name of the secret that contains credentials
    type: string  
  steps:
  - args:
    - |-
      set -e

      # Dependency:
      # secrets
      #  ocm-staging
      #  cdoanocm-kubeadmin-password

      TOKEN=$(oc get secret $(params.GITOPS_SECRET_NAME) -ojsonpath='{.data.token}' | base64 --decode)
      AWS_ACCOUNT_ID=$(oc get secret $(params.GITOPS_SECRET_NAME) -ojsonpath='{.data.AWS_ACCOUNT_ID}' | base64 --decode)
      ACCESS_KEY_ID=$(oc get secret $(params.GITOPS_SECRET_NAME) -ojsonpath='{.data.ACCESS_KEY_ID}' | base64 --decode)
      SECRET_ACCESS_KEY=$(oc get secret $(params.GITOPS_SECRET_NAME) -ojsonpath='{.data.SECRET_ACCESS_KEY}' | base64 --decode)
      USER=admin-22

      if oc get secret cdoanocm-kubeadmin-password; then
        echo "Secret exists ..."
        PW=$(oc get secret cdoanocm-kubeadmin-password -ojsonpath='{.data.password}')
      else
        PW=$(openssl rand -base64 32)
        oc create secret generic cdoanocm-kubeadmin-password --from-literal=password=$PW
        echo "Generated admin password for OCM cluster and saved as secret ..."
      fi

      ocm login --token=$TOKEN --url 'staging'
      
      ocm get clusters

      if ocm list clusters $(params.cluster-name) | grep $(params.cluster-name); then
        echo "cluster $(params.cluster-name) already exists ..."
      else
        echo "creating cluster $(params.cluster-name) in staging ..."
        if [[ "$(params.multi-az)" == "true" ]]; then
          ocm create cluster $(params.cluster-name) \
            --aws-account-id $AWS_ACCOUNT_ID \
            --aws-access-key-id $ACCESS_KEY_ID \
            --aws-secret-access-key $SECRET_ACCESS_KEY \
            --ccs --version $(params.ocp-version) \
            --provider aws \
            --region us-east-1 \
            --multi-az \
            --compute-nodes 3
        else
          ocm create cluster $(params.cluster-name) \
            --aws-account-id $AWS_ACCOUNT_ID \
            --aws-access-key-id $ACCESS_KEY_ID \
            --aws-secret-access-key $SECRET_ACCESS_KEY \
            --ccs --version $(params.ocp-version) \
            --provider aws \
            --region us-east-1 \
            --compute-nodes 3
        fi
      fi

      echo "Done task ..."
      exit 0 
    command:
    - /bin/bash
    - -c
    image: quay.io/cdoan_rh22/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source