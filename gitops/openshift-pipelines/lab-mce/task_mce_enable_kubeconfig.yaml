---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: mce-enable-kubeconfig
  namespace: open-cluster-management-pipelines-mce
spec:
  params:
  - name: kubeconfig
    default: ""
    description: "base64 encoded kubeconfig of the cluster we want to run this task on. Default to empty string, use the current cluster."
    type: string
  - name: managed-cluster
    default: "cdoan-hosting-cluster"
    description: "name of the managed cluster to run tasks on."
    type: string
  steps:
  - args:
    - |-
      set -e

      export K=$(params.kubeconfig)
      if [ -z $K ]; then
        echo "kubeconfig is empty, check if this is a managed cluster, and we have the kubeconfig."
        if [[ "$(params.managed-cluster)" != "" ]]; then
          echo "found managed cluster $(params.managed-cluster)"
          if oc get secret -n cdoan-hosting-cluster -l hive.openshift.io/secret-type=kubeconfig -o name; then
            _SECRET=$(oc get secret -n cdoan-hosting-cluster -l hive.openshift.io/secret-type=kubeconfig -o name)
            oc -n $(params.managed-cluster) extract $_SECRET --confirm
            mv kubeconfig remote.kubeconfig
            export KUBECONFIG=$(pwd)/remote.kubeconfig
            echo $KUBECONFIG
          fi
        else
          echo "KUBECONFIG is undefined"
        fi
      fi

      oc cluster-info

      # setup of secrets
      ##################
      #TOKEN=$(oc get secret $(params.GITOPS_SECRET_NAME) -ojsonpath='{.data.token}' | base64 --decode)
      #AWS_ACCOUNT_ID=$(oc get secret awscreds -ojsonpath='{.data.AWS_ACCOUNT_ID}' | base64 --decode)
      #ACCESS_KEY_ID=$(oc get secret awscreds -ojsonpath='{.data.ACCESS_KEY_ID}' | base64 --decode)
      #SECRET_ACCESS_KEY=$(oc get secret awscreds -ojsonpath='{.data.SECRET_ACCESS_KEY}' | base64 --decode)
      
      oc cluster-info
      oc extract secret/aws-credentials
      mkdir ~/.aws
      cp credentials ~/.aws

      set +e
      exit 0
    command:
    - /bin/bash
    - -c
    image: quay.io/acm-sre/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source
