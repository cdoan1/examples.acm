---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: mce-check-status
  namespace: open-cluster-management-pipelines-mce
spec:
  params:
  - name: kubeconfig
    default: ""
    description: "base64 encoded kubeconfig of the cluster we want to run this task on. Default to empty string, use the current cluster."
    type: string
  - name: managed-cluster
    default: "osdprestaging"
    description: "name of the managed cluster to run tasks on."
    type: string
  steps:
  - args:
    - |-

      if [ -f $(pwd)/remote.kubeconfig ]; then
        export KUBECONFIG=$(pwd)/remote.kubeconfig
      fi
      
      oc cluster-info

      NS=open-cluster-management
      NS2=multicluster-engine

      function check() {
        if [[ "$1" == "Available" ]] || [[ "$1" == "Succeeded" ]] || [[ "$1" == "Running" ]]; then
          icon="✅"
        else
          icon="❌ (Expected: Available | Succeeded | Running)"
        fi
        echo "$1 $icon"
      }

      acm_current_csv=$(oc get sub -n open-cluster-management -l operators.coreos.com/advanced-cluster-management.open-cluster-management= -ojsonpath='{.items[].status.currentCSV}')
      mce_current_csv=$(oc get sub -n multicluster-engine -ojsonpath='{.items[].status.currentCSV}')

      rc=$(oc get mch multiclusterhub -n $NS -ojsonpath='{.status.phase}')
      rc11=$(oc get csv $acm_current_csv -n $NS -ojsonpath='{.status.phase}')
      rc21=$(oc get mce multiclusterengine -n $NS -ojsonpath='{.status.phase}')
      rc22=$(oc get csv $mce_current_csv -n $NS2 -ojsonpath='{.status.phase}')

      _ATTEMPTS=0
      until oc get mch multiclusterhub -n $NS -o jsonpath='{.status.phase}' | grep -q "Running";
      do 
          echo "Waiting 60s for MCH..."
          _ATTEMPTS=$((_ATTEMPTS + 1))
          sleep 60;
          if [[ $_ATTEMPTS == 5 ]]; then
              echo "Failed to start MCH in allotted time"
              exit 1
          fi
      done

      rc=$(oc get mch multiclusterhub -n $NS -ojsonpath='{.status.phase}')
      rc11=$(oc get csv $acm_current_csv -n $NS -ojsonpath='{.status.phase}')
      rc21=$(oc get mce multiclusterengine -n $NS -ojsonpath='{.status.phase}')
      rc22=$(oc get csv $mce_current_csv -n $NS2 -ojsonpath='{.status.phase}')

      echo "current mch operator phase                            : $(check $rc)"
      echo "current acm subscription currentCSV version           : $acm_current_csv"
      echo "current acm csv phase                                 : $(check $rc11)"


      echo "current mce operator phase                            : $(check $rc21)"
      echo "current mce subscription currentCSV version           : $mce_current_csv"
      echo "current mce csv phase                                 : $(check $rc22)" 

      echo "acm snapshot                                          : "$(oc get pods -n open-cluster-management -o yaml | grep image: | sort -u | grep custom-registry | cut -d':' -f4 | sort -u)
      echo "acm snapshot                                          : "$(oc get pods -n openshift-marketplace -o yaml | grep " image:"  | grep acm-custom | grep -v "\- image:" | sort -u | awk '{print $2}')
      echo "mce snapshot                                          : "$(oc get pods -n multicluster-engine -o yaml | grep image: | sort -u | grep custom-registry | cut -d':' -f4 | sort -u)
      echo "mce snapshot                                          : "$(oc get pods -n openshift-marketplace -o yaml | grep " image:"  | grep mce-custom | grep -v "\- image:" | sort -u | awk '{print $2}')
      echo "count current managed clusters                        : "$( oc get managedcluster -A | wc -l )
      echo "count current manifestwork                            : "$( oc get manifestwork -A | wc -l )

      oc get packagemanifest advanced-cluster-management -o yaml | grep " version:" | grep -v v1 | sed "s/^[ \t]*//"

      for i in open-cluster-management open-cluster-management-hub multicluster-engine
      do
        oc get pods -n $i -o yaml | grep "image:" | sort -u | grep -v f:image | sed s'#    -#     #' | sort -u > $i.image-manifests.txt
      done

      exit 0
    command:
    - /bin/bash
    - -c
    image: quay.io/acm-sre/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source
