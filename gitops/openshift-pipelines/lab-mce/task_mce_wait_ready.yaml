---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: mce-wait-ready
  namespace: open-cluster-management-pipelines-mce
spec:
  params:
  - name: kubeconfig
    default: ""
    description: "base64 encoded kubeconfig of the cluster we want to run this task on. Default to empty string, use the current cluster."
    type: string
  - name: managed-cluster
    default: "cdoan-hosting-cluster"
    description: "name of the managed cluster to run tasks on."
    type: string
  steps:
  - args:
    - |-

      if [ -f $(pwd)/remote.kubeconfig ]; then
        export KUBECONFIG=$(pwd)/remote.kubeconfig
      else
        exit 1
      fi
      
      oc cluster-info

      NS=open-cluster-management
      NS2=multicluster-engine

      
      echo "Ensure that the operand are available or Complete"
      oc wait --for="condition=Available" mce multiclusterengine -n multicluster-engine --timeout=600s
      oc wait --for="condition=Complete" mch multiclusterhub -n open-cluster-management --timeout=600s
      
      # oc wait --for="condition=InstallSucceeded" csv -n multicluster-engine multicluster-engine.v2.2.0

      ace_current_csv=$(oc get sub -n open-cluster-management -l operators.coreos.com/advanced-cluster-management.open-cluster-management= -ojsonpath='{.items[].status.currentCSV}')
      mce_current_csv=$(oc get sub -n multicluster-engine -ojsonpath='{.items[].status.currentCSV}')
      _mce_csv_condition=$(oc get csv -n multicluster-engine $mce_current_csv -ojsonpath='{.status.conditions[-1].phase}')
      _acm_csv_condition=$(oc get csv -n open-cluster-management $acm_current_csv -ojsonpath='{.status.conditions[-1].phase}')

      echo "Ensure that csv are succeeded:"
      echo " mce: $_mce_csv_condition"
      echo " acm: $_acm_csv_condition"
      
      exit 0
    command:
    - /bin/bash
    - -c
    image: quay.io/acm-sre/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
  workspaces:
  - name: source
