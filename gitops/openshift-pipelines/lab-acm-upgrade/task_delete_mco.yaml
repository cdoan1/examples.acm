---

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: delete-mco
  namespace: open-cluster-management-pipelines-upgrade
spec:
  workspaces:
  - name: source
  params:
  - name: GITOPS_SECRET_NAME
    default: 'install-secret'
    description: Name of the secret that contains credentials
    type: string
  steps:
  - args:
    - |-
      set -e

      _PS=$(oc get secret $(params.GITOPS_SECRET_NAME) -ojsonpath='{.data.globalPullSecretEncoded}' | base64 --decode)
      NS=open-cluster-management-observability
      TOP=$(pwd)
      
      oc cluster-info

      set -x

      if ! oc get mco observability; then
        # obs is not running, lets create the mco manifest

        cat > $TOP/mco.yaml <<EOF
        apiVersion: observability.open-cluster-management.io/v1beta2
        kind: MultiClusterObservability
        metadata:
          labels:
            app.kubernetes.io/instance: multiclusterobservability
          name: observability
        spec:
          enableDownsampling: true
          imagePullSecret: multiclusterhub-operator-pull-secret
          observabilityAddonSpec:
            enableMetrics: true
            interval: 300
          storageConfig:
            alertmanagerStorageSize: 1Gi
            compactStorageSize: 100Gi
            metricObjectStorage:
              key: thanos.yaml.secret
              name: thanos-object-storage
            receiveStorageSize: 100Gi
            ruleStorageSize: 1Gi
            storageClass: managed-premium
            storeStorageSize: 10Gi
            writeStorage:
            - key: ep.yaml
              name: victoriametrics
            - key: ep.yaml
              name: kafka
      EOF
        exit 0
      fi

      oc get mco observability -o yaml -n $NS > $TOP/mco.yaml
      cat $TOP/mco.yaml || true

      oc delete mco --all
      
      oc wait --for=delete pod/observability-thanos-rule-0 -n open-cluster-management-observability --timeout=300s

      exit 0
    command:
    - /bin/bash
    - -c
    image: quay.io/zkayyali812/ocm-utils:latest
    name: apply
    resources: {}
    workingDir: /workspace/source
